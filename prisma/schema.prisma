// Este é o seu arquivo de schema Prisma.
// Saiba mais sobre ele na documentação: https://pris.ly/d/prisma-schema

// Comando para aplicar as migrações no banco de dados:
// npx prisma migrate dev --name "nome_do_update"

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tipo {
  id          Int      @id @default(autoincrement())
  descricao   String

  usuarios    Usuario[]
}

model Usuario {
  id            Int           @id @default(autoincrement())
  nome          String        @unique
  senha         String
  
  tipo_id       Int

  // Relacionamento: Um usuário pode ter vários pedidos. Um usuário deve ter um tipo.
  pedidos       Pedido[]
  tipo          Tipo @relation(fields: [tipo_id], references: [id])
}

model Mesa {
  id      Int      @id @default(autoincrement())
  numero  String   @unique
  
  // Relacionamento: Uma mesa pode estar em vários pedidos.
  pedidos Pedido[]
}

model Cliente {
  id       Int      @id @default(autoincrement())
  nome     String
  telefone String?
  
  // Relacionamento: Um cliente pode ter vários pedidos.
  pedidos  Pedido[]
}

model Categoria {
  id       Int       @id @default(autoincrement())
  nome     String    @unique
  
  // Relacionamento: Uma categoria pode ter vários produtos.
  produtos Produto[]
}

model Produto {
  id          Int       @id @default(autoincrement())
  nome        String
  valor       Decimal   @db.Decimal(10, 2)
  descricao   String?
  disponivel  Boolean   @default(true)
  adicional   Boolean   @default(false) // Indica se o produto é um adicional.
  
  categoria_id Int
  
  // Relacionamento: Um produto deve pertencer a uma categoria. Um produto está em vários Itens.
  categoria   Categoria @relation(fields: [categoria_id], references: [id])
  itens       Item[]

  // Garante que não haja produtos com o mesmo nome na mesma categoria.
  @@unique([nome, categoria_id])
}

model Status {
  id          Int         @id @default(autoincrement())
  descricao   String

  pedidos     Pedido[]
}

model Pedido {
  id            Int       @id @default(autoincrement())
  observacao    String?
  criado_em     DateTime  @default(now())
  
  // Chaves estrangeiras.
  mesa_id       Int?
  cliente_id    Int?
  status_id     Int       @default(1)
  usuario_id    Int
  
  // Relacionamentos
  mesa        Mesa?     @relation(fields: [mesa_id], references: [id])
  cliente     Cliente?  @relation(fields: [cliente_id], references: [id])
  status      Status    @relation(fields: [status_id], references: [id])
  usuario     Usuario   @relation(fields: [usuario_id], references: [id])
  itens       Item[]

  @@index([status_id])
  @@index([criado_em])
  @@index([mesa_id])
  @@index([cliente_id])
  @@index([usuario_id])
}

model Item {
  id              Int     @id @default(autoincrement())
  valor_unitario  Decimal @db.Decimal(10, 2)
  quantidade      Int
  
  pedido_id       Int
  produto_id      Int
  
  // --- RELACIONAMENTO UNÁRIO (AUTO-RELACIONAMENTO) ---
  // Um item adicional pertence a um item principal.
  // Esta é a chave estrangeira para o próprio modelo Item.
  pertence_a_id   Int?
  
  // Relação para o item principal. Considerando a remoção de ItemPrincipal
  item_principal  Item?   @relation("Item_adicionais", fields: [pertence_a_id], references: [id], onDelete: Cascade)
  
  // Um item principal pode ter uma lista de itens adicionais.
  adicionais      Item[]  @relation("Item_adicionais")
  // --- FIM DO RELACIONAMENTO UNÁRIO ---
  
  // Relacionamentos com outras tabelas.
  pedido          Pedido  @relation(fields: [pedido_id], references: [id], onDelete: Cascade)
  produto         Produto @relation(fields: [produto_id], references: [id])
  
  @@index([pedido_id])
  @@index([pertence_a_id])
}